import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/ApiError.js";
import { User } from "../models/user.model.js";
import { uploadOnCloudinary } from "../utils/cloudinary.js";
import { ApiResponse } from "../utils/ApiResponse.js";

const generateAccessAndRefreshToken = async (userId) => {
  try {
    //finding user by _id which generated by mongoDB
    const user = await User.findById(userId);

    const accessToken = user.generateAccesToken();
    const refreshToken = user.generateRefreshToken();

    //adding refreshToken to user-model
    user.refreshToken = refreshToken;
    await user.save({ validateBeforeSave: false }); //validate is false because we do not want validation for password at the time of saving refreshToken as we did not pass isPasswordCorrect when we call this generateAccessAndRefreshToken()-method

    return { accessToken, refreshToken };
  } catch (error) {
    throw new ApiError(
      500,
      "Something went wrong while generatinf refresh and access tokens"
    );
  }
};

const registerUser = asyncHandler(async (req, res) => {
  //get user details from frontend
  //validation- insure if not empty
  //check if user is already existed:with userName && userEmail
  //check for cover_images, check for avatar
  //upload them to cloudinary, and check if avatar uploaded successfully
  //now create user object - create entry in db
  //remove password and refresh token field from response
  //check for user creation
  //return response

  //if data coming from form-submissin and json, we extract from req.body. if from url we will see it later
  const { fullName, userName, userEmail, password } = req.body;
  // console.log(`userEmail: ${userEmail}`);

  if (
    [fullName, userEmail, userName, password].some(
      (field) => field?.trim() == ""
    )
  ) {
    throw new ApiError(400, "All fields are required");
  }

  //finding existing user with userName and userEmail
  const existedUser = await User.findOne({
    $or: [{ userName }, { userEmail }],
  });

  if (existedUser) {
    throw new ApiError(409, "User with this email and username already exists");
  }

  // console.log(req.body);

  const avatarLocalPath = req.files?.avatar[0]?.path;
  // const coverImageLocalPath = req.files?.coverImage[0]?.path;

  let coverImageLocalPath;
  if (
    req.files &&
    Array.isArray(req.files.coverImage) &&
    req.files.coverImage.length > 0
  ) {
    coverImageLocalPath = req.files.coverImage[0].path;
  }

  if (!avatarLocalPath) throw new ApiError(400, "Avatar file is required");
  //extracting url from cloudinary after uploading resources to cloudinary
  const avatar = await uploadOnCloudinary(avatarLocalPath);
  const coverImage = await uploadOnCloudinary(coverImageLocalPath); //if coverImageLocalPath is undefined this will return empty string by cloudinary
  if (!avatar) throw new ApiError(400, "Avatar file is required");

  const user = await User.create({
    fullName,
    avatar: avatar.url,
    coverImage: coverImage?.url || "",
    userEmail,
    password,
    userName: userName.toLowerCase(),
  });

  const userCreated = await User.findById(user._id).select(
    "-password -refreshToken"
  );

  if (!userCreated)
    throw new ApiError(500, "server is busy now, can't register new user");

  return res
    .status(201)
    .json(new ApiResponse(200, userCreated, "User registered successfully"));
});

const loginUser = asyncHandler(async (req, res) => {
  //extract data from req.body
  //user base | email base login
  //find user on the basis of userName | userEmail or password
  //check password match with userName | userEmail
  //access and refresh token
  //send cookies

  const { userEmail, userName, password } = req.body;
  if (!userEmail && !userName)
    throw new ApiError(400, "userName | userEmail or password is required");

  //finding user on the basis of userEmail or userName
  const userFound = await User.findOne({
    $or: [{ userName }, { userEmail }],
  }); //this user has no refreshToken and we are not sure if password input by user at the time of log-in and the password input by user at the time of sign-up is same || isPasswordCorrect-this operation is not done yet

  if (!userFound) throw new ApiError(404, "User not found");

  const isPasswordCorrect = await userFound.isPasswordCorrect(password); //output true || false

  if (isPasswordCorrect === false)
    throw new ApiError(401, "password is incorrect");

  //extracting accessToken and refreshToken from generateAccessAndRefreshToken -method
  const { accessToken, refreshToken } = await generateAccessAndRefreshToken(
    userFound._id
  );

  //we do not want to give acces to user: password and refreshToken after user is logged in, see below
  const loggedInUser = await User.findById(userFound._id).select(
    "-password -refreshToken"
  ); //this user, found by userFound._id, has refresh token but we are removing that in-field from the loggedInUser using select-method

  /*
  //another approach for the above one
 const loggedInUser = await  userFound.select(
    "-password"
  )
  */

  //sending cookies
  const options = {
    httpOnly: true, //true means only modifiable by server
    secure: true, //true means only modifiable by server
  };

  return res
    .status(200)
    .cookie("accessToken", accessToken, options) //send to user's browser
    .cookie("refreshToken", refreshToken, options) //send to user's browser
    .json(
      new ApiResponse(
        200,
        {
          user: loggedInUser,

          //why sending accessToken and refreshToken in json as we already sent to cookie, reason is : maybe user itself want to save accessToken and refreshToken in his localStorage, maybe server will be used in mobile-app development where cookie concept is not available
          accessToken, //sent to front-end
          refreshToken, //sent to front-end
        },
        "User logged in  successfully"
      )
    );
});

const logoutUser = asyncHandler(async (req, res) => {
  //at very first we need to clear cookies we sent to user-browser
  //need to reset refreshToken  in user-model
  //note:-  now req.user, we have its access here, as we arrived here through verifyJWT-middleware(auth.middleware.js)

  //why findByIdAndUpdate but not findById: because if we use findById, we have to go through save, delete refreshToken, validation, etc
  await User.findByIdAndUpdate(
    req.user._id,
    {
      $set: { refreshToken: undefined }, //$set-is a mongoose operator , use to update model
    },
    {
      new: true, //this insure , whatsoever value will be returned, it will be new & updated value
    }
  );

  const options = {
    httpOnly: true,
    secure: true,
  };

  //now sending response and clearing cookies from user's browser
  return res
    .status(200)
    .clearCookie("accessToken", options)
    .clearCookie("refreshToken", options)
    .json(new ApiResponse(200, {}, "User logged Out")); //sending empty object in the place of data
});

export { registerUser, loginUser, logoutUser };
