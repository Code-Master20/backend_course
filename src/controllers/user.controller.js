import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/ApiError.js";
import { User } from "../models/user.model.js";
import { uploadOnCloudinary } from "../utils/cloudinary.js";
import { ApiResponse } from "../utils/ApiResponse.js";
import jwt from "jsonwebtoken";
import mongoose from "mongoose";

const generateAccessAndRefreshToken = async (userId) => {
  try {
    //finding user by _id which generated by mongoDB
    const user = await User.findById(userId);

    //why await here : because we used async-func when we defined generateAccessToken and generateRefreshToken in user-model
    const accessToken = await user.generateAccesToken();
    const refreshToken = await user.generateRefreshToken();

    //adding refreshToken to user-model
    user.refreshToken = refreshToken;
    await user.save({ validateBeforeSave: false }); //validate is false because we do not want validation for password at the time of saving refreshToken as we did not pass isPasswordCorrect when we call this generateAccessAndRefreshToken()-method

    return { accessToken, refreshToken };
  } catch (error) {
    throw new ApiError(
      500,
      "Something went wrong while generatinf refresh and access tokens"
    );
  }
};

const registerUser = asyncHandler(async (req, res) => {
  //get user details from frontend
  //validation- insure if not empty
  //check if user is already existed:with userName && userEmail
  //check for cover_images, check for avatar
  //upload them to cloudinary, and check if avatar uploaded successfully
  //now create user object - create entry in db
  //remove password and refresh token field from response
  //check for user creation
  //return response

  //if data coming from form-submissin and json, we extract from req.body. if from url we will see it later
  const { fullName, userName, userEmail, password } = req.body;
  // console.log(`userEmail: ${userEmail}`);

  if (
    [fullName, userEmail, userName, password].some(
      (field) => field?.trim() == ""
    )
  ) {
    throw new ApiError(400, "All fields are required");
  }

  //finding existing user with userName and userEmail
  const existedUser = await User.findOne({
    $or: [{ userName }, { userEmail }],
  });

  if (existedUser) {
    throw new ApiError(409, "User with this email and username already exists");
  }

  // console.log(req.body);

  const avatarLocalPath = req.files?.avatar[0]?.path;
  // const coverImageLocalPath = req.files?.coverImage[0]?.path;

  let coverImageLocalPath;
  if (
    req.files &&
    Array.isArray(req.files.coverImage) &&
    req.files.coverImage.length > 0
  ) {
    coverImageLocalPath = req.files.coverImage[0].path;
  }

  if (!avatarLocalPath) throw new ApiError(400, "Avatar file is required");
  //extracting url from cloudinary after uploading resources to cloudinary
  const avatar = await uploadOnCloudinary(avatarLocalPath);
  const coverImage = await uploadOnCloudinary(coverImageLocalPath); //if coverImageLocalPath is undefined this will return empty string by cloudinary
  if (!avatar) throw new ApiError(400, "Avatar file is required");

  const user = await User.create({
    fullName,
    avatar: avatar.url,
    coverImage: coverImage?.url || "",
    userEmail,
    password,
    userName: userName.toLowerCase(),
  });

  const userCreated = await User.findById(user._id).select(
    "-password -refreshToken"
  );

  if (!userCreated)
    throw new ApiError(500, "server is busy now, can't register new user");

  return res
    .status(201)
    .json(new ApiResponse(200, userCreated, "User registered successfully"));
});

const loginUser = asyncHandler(async (req, res) => {
  //extract data from req.body
  //user base | email base login
  //find user on the basis of userName | userEmail or password
  //check password match with userName | userEmail
  //access and refresh token
  //send cookies

  const { userEmail, userName, password } = req.body;

  if (password == "" && (userEmail == "" || userName == "")) {
    throw new ApiError(401, "All fields are required", [
      {
        field: "userEmail or userName",
        message: "Either userEmail or userName is required",
      },
      {
        field: "password",
        message: "password is required",
      },
    ]);
  }

  if (userEmail == "" || userName == "") {
    throw new ApiError(401, " (email or username) required", [
      {
        field: "userEmail",
        message: "Either userEmail or userName is required",
      },
      {
        field: "userName",
        message: "Either userEmail or userName is required",
      },
    ]);
  }

  if (password == "") {
    throw new ApiError(401, "password is required", [
      { field: "password", message: "Password is required" },
    ]);
  }

  //finding user on the basis of userEmail or userName
  const userFound = await User.findOne({
    $or: [{ userName }, { userEmail }],
  });
  //this user has no refreshToken and we are not sure if password input by user at the time of log-in and the password input by user at the time of sign-up is same || isPasswordCorrect-this operation is not done yet

  if (!userFound) {
    throw new ApiError(404, "User not found with this userEmail or userName", [
      {
        field: userEmail ? "userEmail" : "userName",
        message: "No account found",
      },
    ]);
  }

  // if (userFound.userEmail !== userEmail)
  //   throw new ApiError(401, "userEmail is incorrect");
  // if (userFound.userName !== userName)
  //   throw new ApiError(401, "userName is incorrect");

  const isPasswordCorrect = await userFound.isPasswordCorrect(password); //output true || false

  if (!isPasswordCorrect) {
    throw new ApiError(401, "Password is Incorrect", [
      { field: "password", message: "Password is incorrect" },
    ]);
  }

  //extracting accessToken and refreshToken from generateAccessAndRefreshToken -method
  const { accessToken, refreshToken } = await generateAccessAndRefreshToken(
    userFound._id
  );

  //we do not want to give acces to user: password and refreshToken after user is logged in, see below
  const loggedInUser = await User.findById(userFound._id).select(
    "-password -refreshToken"
  ); //this user, found by userFound._id, has refresh token but we are removing that in-field from the loggedInUser using select-method

  /*
  //another approach for the above one
 const loggedInUser = await  userFound.select(
    "-password"
  )
  */

  //sending cookies
  const options = {
    httpOnly: true, //true means only modifiable by server
    secure: true, //true means only modifiable by server
  };

  return res
    .status(200)
    .cookie("accessToken", accessToken, options) //send to user's browser
    .cookie("refreshToken", refreshToken, options) //send to user's browser
    .json(
      new ApiResponse(
        200,
        {
          user: loggedInUser,

          //why sending accessToken and refreshToken in json as we already sent to cookie, reason is : maybe user itself want to save accessToken and refreshToken in his localStorage, maybe server will be used in mobile-app development where cookie concept is not available
          accessToken, //sent to front-end
          refreshToken, //sent to front-end
        },
        "User logged in  successfully"
      )
    );
});

const logoutUser = asyncHandler(async (req, res) => {
  //at very first we need to clear cookies we sent to user-browser
  //need to reset refreshToken  in user-model
  //note:-  now req.user, we have its access here, as we arrived here through verifyJWT-middleware(auth.middleware.js)

  //why findByIdAndUpdate but not findById: because if we use findById, we have to go through save, delete refreshToken, validation, etc
  await User.findByIdAndUpdate(
    req.user._id,
    {
      $set: { refreshToken: undefined }, //$set-is a mongoose operator , use to update model
    },
    {
      new: true, //this insure , whatsoever value will be returned, it will be new & updated value
    }
  );

  const options = {
    httpOnly: true,
    secure: true,
  };

  //now sending response and clearing cookies from user's browser
  return res
    .status(200)
    .clearCookie("accessToken", options)
    .clearCookie("refreshToken", options)
    .json(new ApiResponse(200, {}, "User logged Out")); //sending empty object in the place of data
});

//define an end point where user can refresh his accessToken
const refreshAccessToken = asyncHandler(async (req, res) => {
  //for mobile app if refreshToken in req.body
  const incomingRefreshToken =
    req.cookies.refreshToken || req.body.refreshToken;

  if (!incomingRefreshToken) {
    throw new ApiError(401, "Unauthorized Request", [
      {
        field: "invalid-token",
        message: "Please Log-in Again",
      },
    ]);
  }

  try {
    //verifying token user-token && token-user-model

    //one thing to note here:---> decodedToken stores (header:algorithm=HS256 and tokentype=JWT), ( payload:Data), (verified signature)
    const decodedToken = jwt.verify(
      incomingRefreshToken,
      process.env.REFRESH_TOKEN_SECRET
    );

    const user = await User.findById(decodedToken?._id);

    if (!user) {
      throw new ApiError(401, "Invalid Refresh Token", [
        {
          field: "invalid-Token",
          message: "Please Log-In Again",
        },
      ]);
    }

    if (incomingRefreshToken !== user?.refreshToken) {
      throw new ApiError(401, "RefreshToken is expired or used", [
        {
          field: "refresh-expired",
          message: "Please Log-In Again",
        },
      ]);
    }

    const options = {
      httpOnly: true,
      secure: true,
    };

    const { accessToken, refreshToken } = await generateAccessAndRefreshToken(
      user._id
    );

    const newRefreshToken = refreshToken;

    return res
      .status(200)
      .cookie("accessToken", accessToken, options)
      .cookie("refreshToken", newRefreshToken, options)
      .json(
        new ApiResponse(
          200,
          {
            accessToken,
            refreshToken: newRefreshToken,
          },
          "Access token refreshed succesfully"
        )
      );
  } catch (error) {
    throw new ApiError(
      401,
      error?.message || "Invalid refreshToken !! Please Log-In Again"
    );
  }
});

const changeCurrentPassword = asyncHandler(async (req, res) => {
  const { oldPassword, newPassword, confirmedPassword } = req.body;

  if (!(newPassword === confirmedPassword))
    throw new ApiError(400, "newPassword and confirmPassword are not same", [
      {
        field: "new-confirm password not-match",
        message:
          "newPassword is not equal to confirmPassword, please re-check confirmPassword",
      },
    ]);

  //as we used middle-ware (verifyJWT || auth.middleware.js) in route-handling for change-password, we have access to req.user, so we can directly find logged-in user using "req.user._id"
  const user = await User.findById(req.user?._id);

  const isPasswordCorrect = await user.isPasswordCorrect(oldPassword);

  if (!isPasswordCorrect) {
    throw new ApiError(400, "Invalid old password", [
      {
        field: "Invalid-Old-Password",
        message: "Your Old Password Does not Match",
      },
    ]);
  }

  //at the time of this code run--> pre-save hook in user-model will trigger
  user.password = confirmedPassword;
  await user.save({ validateBeforeSave: false });

  return res
    .status(200)
    .json(
      new ApiResponse(200, {}, `Your Password is changed: ${confirmedPassword}`)
    );
});

const getCurrentUser = asyncHandler(async (req, res) => {
  res
    .status(200)
    .json(
      new ApiResponse(
        200,
        req.user,
        "Current LoggedIn User Fetched Successfully"
      )
    );
});

const updateAccountDetails = asyncHandler(async (req, res) => {
  const { userName, fullName, userEmail } = req.body;

  if (!fullName && !userEmail && !userName) {
    throw new ApiError(400, "All fields are required");
  }

  if (!fullName && userEmail && userName) {
    throw new ApiError(
      400,
      "full name is required to update the existing fullName"
    );
  }

  if (!userName && fullName && userEmail) {
    throw new ApiError(
      400,
      "User name is required to update the existing userName"
    );
  }

  if (!userEmail && fullName && userName) {
    throw new ApiError(
      400,
      "user email is required to update the existing userEmail"
    );
  }

  const user = await User.findByIdAndUpdate(
    req.user?._id,
    {
      $set: { fullName, userEmail, userName },
    },
    {
      new: true,
    }
  ).select("-password");

  return res
    .status(200)
    .json(new ApiResponse(200, user, "Account details updated successfully"));
});

const updateUserAvatar = asyncHandler(async (req, res) => {
  const avatarLocalPath = req.file?.path;

  if (!avatarLocalPath) throw new ApiError(400, "Avatar file is missing");

  const avatar = await uploadOnCloudinary(avatarLocalPath);

  if (!avatar.url)
    throw new ApiError(400, "Error while uploading avatar on cloudinary");

  const user = await User.findByIdAndUpdate(
    req.user?._id,
    {
      $set: { avatar: avatar.url },
    },
    {
      new: true,
    }
  ).select("-password");

  return res
    .status(200)
    .json(new ApiResponse(200, user, "Avatar Image updated successfully"));
});

const updateUserCoverImage = asyncHandler(async (req, res) => {
  const coverImageLocalPath = req.file?.path;

  if (!coverImageLocalPath) {
    throw new ApiError(400, "Cover Image File Is Missing");
  }

  const coverImage = await uploadOnCloudinary(coverImageLocalPath);

  if (!coverImage.url) {
    throw new ApiError(400, "Error while uploading coverImage on cloudinary");
  }

  const user = await User.findByIdAndUpdate(
    req.user?._id,
    {
      $set: { coverImage: coverImage.url },
    },
    { new: true }
  ).select("-password");

  return res
    .status(200)
    .json(new ApiResponse(200, user, "coverImage updated successfully"));
});

const getUserChannelProfile = asyncHandler(async (req, res) => {
  //If we want to see a channel-profile, we usualy go to that channel url, so here we use params to get that chennel-profile's url
  const { userName } = req.params;

  //if channel-profile does not exist
  if (!userName?.trim()) {
    throw new ApiError(400, "userName is missing");
  }

  //discussion: we could use User.find(userName) to find the relative user-document and then apply aggregation on the basis of user._id, but we can directly apply aggregation pipeline because there is a method $match to find relative user. SEE BELOW

  //Applying aggregate here || Remember:whatsoever value comes after aggregation, it is in an array-format
  const channel = await User.aggregate([
    //first pipeline(aggregation stage)
    {
      $match: { userName: userName?.toLowerCase() }, //one document is filtered here whose userName === userName(draged from req.params)
    },

    //Now defined how many subscribers, that filtered-user has.
    {
      $lookup: {
        //looking from subscriptionSchema
        from: "subscriptions", //why here "subscriptions" but not "Subscription" because internally in model everything is in lowercase and plural (subscriptionSchema)
        localField: "_id", //here id from filtered-user-document
        foreignField: "chennel", //see in subscriptionSchema
        as: "subscribers", //this we define as we wish
      },
    },

    //now defined how many users, this filtered-user subscribed
    {
      $lookup: {
        from: "subscriptions",
        localField: "_id",
        foreignField: " subscriber",
        as: "subscribedTo",
      },
    },

    //now the above two fields to be added "subscribers" and "subscribedTo" in filtered-user (userSchema-User)
    {
      //this ($addFields) operator will add the above two fields in user-model (userSchema||user.model.js)
      $addFields: {
        subscribersCount: { $size: "$subscribers" }, //$size will count all subscribers // {$size: "$subscribers"} returns length of the array-$subscribers
        channelsSubscribedToCount: { $size: "$subscribedTo" },

        //sending to frontend a value: true or false so that in frontend it could be tracked that an user subscribed another user if the user visits that user's profile
        isSubscribed: {
          $cond: {
            if: { $in: [req.user?._id, "$subscribers.subscriber"] }, //here to check--> the document:"subscribers" user has, is the url-visited user included here or not ||note--> $subscribers point at as:"subscribers" && subscriber point at subscriptionSchema->subscriber
            then: true,
            else: false,
          },
        },
      }, //now user model is modified with new  additional fields (subscribersCount, channelsSubscribedToCount, isSubscribed, etc)
    },

    //The $project stage in MongoDB’s aggregation pipeline is used to reshape each document

    //here we will reshape user-model || we will decide what fields to be included in user-model
    {
      $project: {
        fullName: 1,
        userName: 1,
        subscribersCount: 1,
        channelsSubscribedToCount: 1,
        isSubscribed: 1,
        avatar: 1,
        userEmail: 1,
        coverImage: 1,
        createdAt: 1,
      },
    },
  ]);

  if (!channel?.length) {
    //Checks !channel?.length since aggregate returns an array (even empty).
    throw new ApiError(404, "Channel does not exist");
  }

  //as one user has one channel so in channel-array there will be one element only, so we can return channel[0]-first element of the channel-array
  return res
    .status(200)
    .json(
      new ApiResponse(200, channel[0], "User channel fetched successfully")
    );
});

const getWatchHistory = asyncHandler(async (req, res) => {
  //previously we did User.findById(req.user._id), behind the scene req.user._id converted into string by mongoDB and compare to ObjectId in mongoDB, but in aggregation req.user._id connot be converted into string so we use another approach
  const user = await User.aggregate([
    {
      $match: { _id: new mongoose.Types.ObjectId(req.user._id) }, //user is filtered out with req.user._id
    },

    {
      $lookup: {
        from: "videos",
        localField: "watchHistory",
        foreignField: "_id",
        as: "watchHistory",
        //note:-now in watchHistory-field in user-model so many documents of video-model are stored

        //now define sub-pipeline for stored documents of video-model to define owner of each video (each video document)
        pipeline: [
          {
            //visited user currently in video-model-document. look-up from here to user-model
            $lookup: {
              from: "users",
              localField: "owner",
              foreignField: "_id",
              as: "owner",

              //the above code drag complete user-model in each video-document for owner-field and we do not want complete user-model in each video-document. see below for solutions
              pipeline: [
                //double sub-pipeline
                {
                  $project: {
                    fullName: 1,
                    userName: 1,
                    avatar: 1,
                  },
                },
              ],
            },
          },

          //this stage will convert owner-array into object
          {
            $addFields: {
              owner: {
                $first: "$owner",
              },
            },
          },
        ],
      },
    },

    {},
  ]);

  return res
    .status(200)
    .json(
      new ApiResponse(
        200,
        user[0].watchHistory,
        "watch history fetched successfully"
      )
    );
});

export {
  registerUser,
  loginUser,
  logoutUser,
  refreshAccessToken,
  changeCurrentPassword,
  getCurrentUser,
  updateAccountDetails,
  updateUserAvatar,
  updateUserCoverImage,
  getUserChannelProfile,
  getWatchHistory,
};
